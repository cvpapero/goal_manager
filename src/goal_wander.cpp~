#include <ros/ros.h>
#include <geometry_msgs/PointStamped.h>


#include <geometry_msgs/Pose.h>
#include <geometry_msgs/PoseWithCovarianceStamped.h>



map<int, geometry_msgs::Pose> pose;


class GoalWander
{
private:
  ros::NodeHandle n;
  //ros::Subscriber goal_sub;
  ros::Publisher goal_pub;
  ros::ServiceClient people_srv_;
  geometry_msgs::PoseStamped goal_pose;

public:
  GoalWander()
  {
    //goal_sub = 
    //  n.srbscriber("chatter", 1, &GoalWander::callback, this);

    goal_pub = 
      n.advertise<geometry_msgs::PoseStamped>("move_base_simple/goal",10);

    people_srv_ = 
      n.serviceClient<humans_msgs::HumanSrv>("name_srv");

   geometry_msgs::Pose tmp;
    tmp.position.x = 0.0;
    tmp.position.y = 0.0; 
    tmp.orientation.z = 0;
    tmp.orientation.w = 1;
    pose[0] = tmp;

    tmp.position.x = -1.08;
    tmp.position.y = 5.77; 
    tmp.orientation.z = 0;
    tmp.orientation.w = 1;
    pose[1] = tmp;

    tmp.position.x = 0.0;
    tmp.position.y = 10.4; 
    tmp.orientation.z = 0;
    tmp.orientation.w = 1;
    pose[2] = tmp;

    tmp.position.x = 2.83;
    tmp.position.y = 4.84; 
    tmp.orientation.z = 0;
    tmp.orientation.w = 1;
    pose[3] = tmp;


  }
  ~GoalWander()
  {
    pose.clear();
  }


  //ゴール地点を決定する
  geometry_msgs::Pose goal_decider()
  {
    //pre_goal_id = input_id;
    //ROS_INFO("goal decider, pre_goal_id : %d", pre_goal_id);
    int output_id;

    srand((unsigned)time(NULL));

    if((double)rand()/RAND_MAX < 1./4.)
      {
	output_id = 0;
      }
    else if((double)rand()/RAND_MAX > 1./4. && (double)rand()/RAND_MAX < 2./4.)
      {
	output_id = 1;
      }
    else if((double)rand()/RAND_MAX > 2./4. && (double)rand()/RAND_MAX < 3./4.)
      {
	output_id = 2;
      }
    else 
      {
	output_id = 3;
      }

    return pose[ output_id ];

  }


  //名前まち
  void goal_sender()
  {
    std_msgs::StringConstPtr name 
      = ros::topic::waitForMessage<std_msgs::String>("chatter");
    //name->dataに値が入ってるなら、その名前をキーにして
    //人物位置を取得し、それをパブリッシュする
    if(name->data)
      {
	humans_msgs::HumanSrv hs;
	humans_msgs::Person sp;
	sp.name = name->data;
	hs.request.src.face.persons.push_back(sp); 
	if(people_srv_.call(hs))
	  {
	    goal_pose.pose.position = hs.response.dst.p;
	    goal_pose.pose.orientation.w = 1;
goal_pose.header.stamp = ros::Time::now();
goal_pose.header.frame_id = "map";

	    cout<<name->data << " send goal" << endl;
	    goal_pub.publish(goal_pose);
	  }
	else
	  {
	    cout<<name->data << " has not database" << endl;
	  }
      }
    else
      {
	//値が入ってなかったら、ゴール状態を確かめる
	//目的地についていたら(true)、新しい目的を決定する
	//もし目的地についていなかったらスルー
	if( goal_judge() )
	  {
	    cout << "send to new goal" <<endl;
	    //geometry_msgs::PoseStamped goal_pose;
	    goal_pose.pose = goal_decider();
	    goal_pose.orientation.w = 1;
	    goal_pub.publish( goal_pose );
	  }
	else
	  {
	    cout << "I'm going to goal" <<endl;
	  }
      }
  }

  //ロボットが目的地についたかどうかを判定する
  bool goal_judge(geometry_msgs::PoseStamped toGoal)
  {
    geometry_msgs::PoseWithCovarianceStampedConstPtr msg 
      = ros::topic::waitForMessage<geometry_msgs::PoseWithCovarianceStamped>("amcl_pose");

    if()
      {

	return true;
      }
    
    return false;
  }



};


int main(int argc, char** argv)
{
  ros::init(argc, argv, "goal_wander");
  GoalWander GWObj;
  GWObj.goal_sender();

  ros::spin();
  return 0;
}
